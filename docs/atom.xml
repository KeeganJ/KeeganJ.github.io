<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>KeeganJ</title>
	<subtitle>Keegan Jorgensen - Code, projects, and thoughts.</subtitle>
	<link href="https://keeganj.com/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://keeganj.com"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2019-02-26T00:00:00+00:00</updated>
	<id>https://keeganj.com/atom.xml</id>
	<entry xml:lang="en">
		<title>Estimating Large Table Counts In Postgres</title>
		<published>2019-02-26T00:00:00+00:00</published>
		<updated>2019-02-26T00:00:00+00:00</updated>
		<link href="https://keeganj.com/posts/estimating-large-table-counts-in-postgres/" type="text/html"/>
		<id>https://keeganj.com/posts/estimating-large-table-counts-in-postgres/</id>
		<content type="html">&lt;h2 id=&quot;for-the-want-of-a-count&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#for-the-want-of-a-count&quot; aria-label=&quot;Anchor link for: for-the-want-of-a-count&quot;&gt;#&lt;&#x2F;a&gt;For the Want of a &lt;code&gt;COUNT&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Today I found myself with the problem of executing a &lt;code&gt;COUNT&lt;&#x2F;code&gt; query with a simple &lt;code&gt;WHERE&lt;&#x2F;code&gt; clause on a large table. The user wanted to get an idea of how many rows were of a particular type, but wanted to do so within the course of a page load. The result didn&#x27;t have to be exact, but it did have to give a rough idea of how large the &lt;em&gt;real&lt;&#x2F;em&gt; number of rows in the result were. The &lt;code&gt;COUNT&lt;&#x2F;code&gt; query was taking over a minute to execute (which is well past the threshold of what I wanted in the flow of a web request), so I decided to investigate ways of getting a &amp;quot;close enough&amp;quot; answer in less time.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s a few different ways to approach a problem like this, but many of those approaches involve some level of pre-calculation or caching (such as materialized views or using sequences). I didn&#x27;t want to give such a simple query the overhead of an external process, and I&#x27;m usually averse to database triggers when they aren&#x27;t standard in a database already. I needed a way to estimate the result of my query entirely within a single request flow.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ab-using-explain&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ab-using-explain&quot; aria-label=&quot;Anchor link for: ab-using-explain&quot;&gt;#&lt;&#x2F;a&gt;(Ab)using &lt;code&gt;EXPLAIN&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;After some googling I came across &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.citusdata.com&#x2F;blog&#x2F;2016&#x2F;10&#x2F;12&#x2F;count-performance&quot;&gt;this excellent article by Citus Data&lt;&#x2F;a&gt;, which goes over strategies for efficently calculating and estimating counts on large tables. If your use case is in any way different than mine, I would suggest consulting that article first for a solution that better fits your needs. In it they cite an old trick for getting a rough estimate of the outcome of a query: Parsing the output of the &lt;code&gt;EXPLAIN&lt;&#x2F;code&gt; command.&lt;&#x2F;p&gt;
&lt;p&gt;For those not familiar, &lt;code&gt;EXPLAIN&lt;&#x2F;code&gt; is PostgreSQL&#x27;s way of letting you know how it plans to execute your query. By itself it&#x27;s an excellent tool for debugging long running queries and finding ways of speeding them up. Without adding the keyword &lt;code&gt;ANALYZE&lt;&#x2F;code&gt;, it doesn&#x27;t actually perform your query, it only exposes how it &lt;em&gt;plans&lt;&#x2F;em&gt; to get the result. PostgreSQL uses a set of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;docs&#x2F;10&#x2F;row-estimation-examples.html&quot;&gt;clever techniques&lt;&#x2F;a&gt; to estimate the impact of an action before it performs it, which is necessary for the query to be executed efficiently. &lt;&#x2F;p&gt;
&lt;p&gt;This is great for us, since it means that a highly supported and optomized portion of PostgreSQL is already doing the work of estimating the cost of each part of our query. We just need to glean the number of rows it thinks will be returned:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;CREATE FUNCTION &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;count_estimate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(query &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) RETURNS &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;AS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; $$
DECLARE
    rec   record;
    rows  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;integer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;BEGIN
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;    FOR rec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;IN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; EXECUTE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;EXPLAIN &amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; query LOOP
        rows :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;substring&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(rec.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;QUERY PLAN&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39; rows=([[:digit:]]+)&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;);
        EXIT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;WHEN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; rows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;IS NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;END&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; LOOP;

    RETURN rows;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;END&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
$$ LANGUAGE plpgsql VOLATILE STRICT;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;message-id&#x2F;20050810133157.GA46247@winnie.fuhr.org&quot;&gt;Credit to Mike Fuhr&lt;&#x2F;a&gt; for authoring and posting this to the PostgreSQL mailing list.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Note that in order to use this function we need to pass in our query as text. Depending on how you invoke your SQL queries, that may put an upper limit on how complex of a query you want to feed into this function. Given that the resulting estimate will vary more widely the more complex your query is, being constrained to small and simple queries could be a good thing.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;testing-the-happy-path&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#testing-the-happy-path&quot; aria-label=&quot;Anchor link for: testing-the-happy-path&quot;&gt;#&lt;&#x2F;a&gt;Testing the Happy Path&lt;&#x2F;h2&gt;
&lt;p&gt;Using a table of about 52 million rows, I ran a benchmark to see how much of a difference using estimates would make. (All row numbers below have been slightly fuzzed but ratios have been preserved).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;-- Control
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;COUNT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(*) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; large_table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; condition; 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running the above returns a count of 52,652,307 rows in 1m:24s. Longer than I&#x27;d want to wait around for a result, but it&#x27;s a big table.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;-- Experimental
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; count_estimate(
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;SELECT * FROM large_table WHERE condition&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;); 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running this returns a count of 52,234,432 rows in only took 0.081s. That&#x27;s &lt;em&gt;much&lt;&#x2F;em&gt; faster:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Difference in result:     &lt;strong&gt;0.8%&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Difference in runtime:    &lt;strong&gt;103,704%&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;1037 times the speed in exchange for about a 1% loss in accuracy sounds like a good deal to me.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;potential-pitfalls&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#potential-pitfalls&quot; aria-label=&quot;Anchor link for: potential-pitfalls&quot;&gt;#&lt;&#x2F;a&gt;Potential Pitfalls&lt;&#x2F;h2&gt;
&lt;p&gt;But wait, it&#x27;s not all sunshine and roses. While most of the tests I performed on large tables behaved similarly, there was one case where this form of table estimation did not shine: Shrinking tables.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take a look at a small table on my system that&#x27;s been emptied out for this test:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(*) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; small_table;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;-- Result: 0

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; count_estimate(
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;SELECT * FROM small_table&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;); 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;-- Result: 960
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Wow, that&#x27;s way off! What happened to my 1% accuracy margin? &lt;&#x2F;p&gt;
&lt;p&gt;Maybe it&#x27;s just an issue with a table with 0 rows. What would happen if I were to add 10 rows to my empty table? Would my estimate change?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;INSERT INTO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; small_table (,,,) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;VALUES&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; (,,,), (,,,), ...

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(*) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; small_table;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;-- Result: 10 

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; count_estimate(
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;SELECT * FROM small_table&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;); 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;-- Result: 960
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hmm, no change. Where does 960 come from? Let&#x27;s go back to that list of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;docs&#x2F;10&#x2F;row-estimation-examples.html&quot;&gt;clever techniques&lt;&#x2F;a&gt; in the PostgreSQL docs...&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The number of pages and rows is looked up in pg_class... These numbers are current as of the last VACUUM or ANALYZE on the table. The planner then fetches the actual current number of pages in the table (this is a cheap operation, not requiring a table scan). If that is different from relpages then reltuples is scaled accordingly to arrive at a current number-of-rows estimate.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;OK, so what happens if call &lt;code&gt;VACUUM&lt;&#x2F;code&gt; beforehand?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;VACUUM small_table;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(*) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; small_table;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;-- 10

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; count_estimate(
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;SELECT * FROM small_table&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;); 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;-- 10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s more like it.&lt;&#x2F;p&gt;
&lt;p&gt;Turns out 960 is the number of rows this table had since the last time it was &lt;code&gt;VACUUM&lt;&#x2F;code&gt;ed. This wouldn&#x27;t have been a problem if the table grew steadily, but since it was cleared right before testing PostgreSQL didn&#x27;t get the chance to clean up enough for the estimate to be accurate.&lt;&#x2F;p&gt;
&lt;p&gt;While this may seem like an edge case, I believe it&#x27;s worth knowing about if you want your estimate to be up to date. Particularly if the table your estimating has a chance of going to zero rows.&lt;&#x2F;p&gt;
&lt;p&gt;While we could just &lt;code&gt;VACUUM&lt;&#x2F;code&gt; before performing our query, I don&#x27;t know that doing this automatically every time we want an estimate is the best use of PostgreSQL&#x27;s resources.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;#&lt;&#x2F;a&gt;Summary&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;If you have a massive table and that does have rows regularly added or deleted in significant quantities, using the above &lt;code&gt;count_estimate&lt;&#x2F;code&gt; function could save you a lot of time and resources.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;But&lt;&#x2F;strong&gt; if your table has rows added and&#x2F;or deleted in quantities you would care to see reflected quickly in an estimate and you&#x27;d rather not manually &lt;code&gt;VACUUM&lt;&#x2F;code&gt;, use another technique.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;-- count_estimate.sql

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;CREATE FUNCTION &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;count_estimate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(query &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) RETURNS &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;AS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; $$
DECLARE
  rec   record;
  rows  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;integer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;BEGIN
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;  FOR rec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;IN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; EXECUTE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;EXPLAIN &amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; query LOOP
    rows :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;substring&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(rec.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;QUERY PLAN&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39; rows=([[:digit:]]+)&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;);
    EXIT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;WHEN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; rows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;IS NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;END&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; LOOP;
  RETURN rows;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;END&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
$$ LANGUAGE plpgsql VOLATILE STRICT;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;-- Testing --

-- Control
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;COUNT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(*) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; large_table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; condition; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;-- 52,652,307 -- 1m:24s

-- Experimental
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; count_estimate(
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;SELECT * FROM large_table WHERE condition&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;); 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;-- 52,234,432 -- 0m:00.081s

-- 0.8%      difference in result
-- 103,704%  difference in runtime
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;further-reading&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#further-reading&quot; aria-label=&quot;Anchor link for: further-reading&quot;&gt;#&lt;&#x2F;a&gt;Further Reading&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.citusdata.com&#x2F;blog&#x2F;2016&#x2F;10&#x2F;12&#x2F;count-performance#dup_counts_estimated_filtered&quot;&gt;&amp;quot;Faster PostgreSQL Counting&amp;quot; - citusdata.com&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;docs&#x2F;10&#x2F;row-estimation-examples.html&quot;&gt;&amp;quot;Row Estimation Examples&amp;quot; - postgresql.org&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;message-id&#x2F;20050810133157.GA46247@winnie.fuhr.org&quot;&gt;&amp;quot;Re: **SPAM** Faster count(*)?&amp;quot; - postgresql.org&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Hello World</title>
		<published>2019-02-24T00:00:00+00:00</published>
		<updated>2019-02-24T00:00:00+00:00</updated>
		<link href="https://keeganj.com/posts/hello-world/" type="text/html"/>
		<id>https://keeganj.com/posts/hello-world/</id>
		<content type="html">&lt;p&gt;Welcome to my blog! Not entirely sure what this should be about yet, but I had a free Sunday afternoon and figured it was about time I put together a site.&lt;&#x2F;p&gt;
&lt;p&gt;I doubt that I&#x27;ll be making any major posts to this site any time soon, but to kick things off I thought it may be helpful to discuss how the site was made in thanks to the excellent open source tools I used.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hexo.io&#x2F;&quot;&gt;&lt;strong&gt;Hexo&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; - Excellent blogging framework that uses a node js stack. It&#x27;s not the simplest program out there, but I&#x27;m familiar with the tech stack and can customize it just deeply enough to make it my own.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;probberechts&#x2F;hexo-theme-cactus&quot;&gt;&lt;strong&gt;Cactus&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; - Hexo theme with a few color options. I simplified some of the layouts and changed some colors, but what remains is mostly faithful to the original design. Thanks to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;probberechts&quot;&gt;Pieter Robberechts&lt;&#x2F;a&gt; for the excellent design.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pages.github.com&#x2F;&quot;&gt;&lt;strong&gt;Github Pages&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; - Simple and free static site hosting straight from Github. Hexo has the ability to deploy the rendered site via git, and Github is more than willing to accept pushes to deploy.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;hexo-generator-search&quot;&gt;&lt;strong&gt;hexo-generator-search&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; - A local search generator for hexo that makes instant searches work on a static site. Props for the smooth integration with Cactus.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;setInterval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;post &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;getBlogPost&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
    blog.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(post);
}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;getBlogPost&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; TODO
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</content>
	</entry>
</feed>
